{
  "MaxxiForge - Welder snippets express controller": {
    "prefix": "welder-express-controller",
    "body": [
      "import ResponseHandler from '../../../common/ResponseHandler';",
      "import NotFoundError from '../../../common/exceptions/NotFoundError';",
      "import Service from './Service';",
      "import l from '../../../common/Logger';",
      "",
      "export class Controller {",
      "  async get(req, res) {",
      "    try {",
      "      l.debug(`Request -> ${JSON.stringify(req.ip)}`);",
      "      const $model = await Service.all(req.query);",
      "      return res.json($model);",
      "    } catch (e) {",
      "      ResponseHandler.error(res, e);",
      "    }",
      "  }",
      "",
      "  async getById(req, res) {",
      "    try {",
      "      const $model = await Service.byId(req.params.id);",
      "",
      "      if (!$model) {",
      "        throw new NotFoundError(req);",
      "      }",
      "",
      "      return res.json($model);",
      "    } catch (e) {",
      "      ResponseHandler.error(res, e);",
      "    }",
      "  }",
      "",
      "  async post(req, res) {",
      "    try {",
      "      const $model = await Service.create(req.body);",
      "",
      "      return res.status(201).json($model);",
      "    } catch (e) {",
      "      ResponseHandler.error(res, e);",
      "    }",
      "  }",
      "",
      "  async put(req, res) {",
      "    try {",
      "      const { id } = req.params;",
      "      const { ${fields} } = req.body;",
      "",
      "      const $model = await Service.updateById(id, {",
      "        $fields",
      "      });",
      "",
      "      return res.status(201).json($model);",
      "    } catch (e) {",
      "      ResponseHandler.error(res, e);",
      "    }",
      "  }",
      "",
      "  async delete(req, res) {",
      "    try {",
      "      const { id } = req.params;",
      "      const $model = await Service.deleteById(id);",
      "",
      "      return res.status(201).json($model);",
      "    } catch (e) {",
      "      ResponseHandler.error(res, e);",
      "    }",
      "  }",
      "}",
      "",
      "export default new Controller();",
      ""
    ],
    "description": "MaxxiForge - Welder snippets express controller",
    "scope": ""
  },
  "MaxxiForge - Welder snippets express service": {
    "prefix": "welder-express-service",
    "body": [
      "import ValidationError from '../../../common/exceptions/ValidationError';",
      "import model from '../../../models';",
      "import paginate from '../../../common/paginate';",
      "import projection from '../../../common/projection';",
      "import { Op } from 'sequelize';",
      "import ApplicationError from '../../../common/exceptions/ApplicationError';",
      "import * as yup from 'yup';",
      "import * as messages from 'i18n';",
      "",
      "const { $model } = model;",
      "",
      "class TechnologyService {",
      "  async all({ title = null, active = true, page = 0, pageSize = 10, select = null }) {",
      "    const pagination = paginate(page, pageSize);",
      "    const attributes = projection(select);",
      "    const conditions = [];",
      "    const where = { active };",
      "",
      "    if (title != null && title !== '') {",
      "      conditions.push({ title: { [Op.iLike]: `%${title}%` } });",
      "    }",
      "",
      "    if (conditions.length > 0) {",
      "      where[Op.or] = conditions;",
      "    }",
      "",
      "    const count = await $model.count({ where });",
      "    const items = await $model.findAll({",
      "      order: [['service_master_type', 'ASC'], ['title', 'ASC']],",
      "      attributes,",
      "      where,",
      "      ...pagination",
      "    });",
      "",
      "    return { items, page, pageSize, count };",
      "  }",
      "",
      "  create(technology) {",
      "    return $model.create(technology);",
      "  }",
      "",
      "  byId(id) {",
      "    return $model.findOne({ where: { id } });",
      "  }",
      "",
      "  updateById(id, technology) {",
      "    return $model.update(technology, { where: { id } });",
      "  }",
      "",
      "  async deleteById(id) {",
      "    try {",
      "      const technology = await $model.destroy({ where: { id } });",
      "",
      "      return technology;",
      "    } catch (error) {",
      "      if (error.name == 'SequelizeForeignKeyConstraintError') {",
      "        throw new ValidationError(messages.__('validation.field.delete'), '*');",
      "      }",
      "",
      "      throw error;",
      "    }",
      "  }",
      "}",
      "",
      "export default new TechnologyService();",
      ""
    ],
    "description": "MaxxiForge - Welder snippets express service",
    "scope": ""
  },
  "MaxxiForge - Welder snippets model boolean-field": {
    "prefix": "welder-model-boolean-field",
    "body": [
      "${1:field}: {",
      "    type: DataTypes.BOOLEAN,",
      "    allowNull: ${2|true,false|},",
      "    defaultValue: ${3|true,false|s}",
      "}"
    ],
    "description": "MaxxiForge - Welder snippets model boolean-field",
    "scope": ""
  },
  "MaxxiForge - Welder snippets model default": {
    "prefix": "welder-model-default",
    "body": [
      "import * as messages from 'i18n';\r",
      "\r",
      "export default (sequelize, DataTypes) => {\r",
      "  const ${model} = sequelize.define(\r",
      "    '${model}',\r",
      "    {\r",
      "      ${field}: {\r",
      "        type: DataTypes.STRING(60),\r",
      "        allowNull: false,\r",
      "        validate: {\r",
      "          notEmpty: {\r",
      "            msg: messages.__('validation.field.cannotBeNull', '${field}')\r",
      "          }\r",
      "        }\r",
      "      },\r",
      "      active: {\r",
      "        type: DataTypes.BOOLEAN,\r",
      "        allowNull: false,\r",
      "        defaultValue: true\r",
      "      }\r",
      "    },\r",
      "    {\r",
      "      tableName: '${model}s',\r",
      "      underscored: true,\r",
      "      schema: process.env.DATABASE_SCHEMA || 'public'\r",
      "    }\r",
      "  );\r",
      "\r",
      "\r",
      "  return ${model};\r",
      "};\r",
      ""
    ],
    "description": "MaxxiForge - Welder snippets model default",
    "scope": ""
  },
  "MaxxiForge - Welder snippets model string-field": {
    "prefix": "welder-model-string-field",
    "body": [
      "$field: {",
      "    type: DataTypes.STRING(${ 2: 60 }),",
      "    allowNull: ${2|true,false|},",
      "    validate: {",
      "      notNull: {",
      "        msg: messages.__('validation.field.cannotBeNull', '$field')",
      "      }",
      "    }",
      "}"
    ],
    "description": "MaxxiForge - Welder snippets model string-field",
    "scope": ""
  },
  "MaxxiForge - Welder snippets sql add_column_boolean": {
    "prefix": "welder-sql-add_column_boolean",
    "body": [
      "$column BOOLEAN DEFAULT true NOT NULL,"
    ],
    "description": "MaxxiForge - Welder snippets sql add_column_boolean",
    "scope": ""
  },
  "MaxxiForge - Welder snippets sql add_column_varchar": {
    "prefix": "welder-sql-add_column_varchar",
    "body": [
      "${field} CHARACTER VARYING(60) NOT NULL,"
    ],
    "description": "MaxxiForge - Welder snippets sql add_column_varchar",
    "scope": ""
  },
  "MaxxiForge - Welder snippets sql create_search_index": {
    "prefix": "welder-sql-create_search_index",
    "body": [
      "CREATE INDEX idx_${table}_${column} ON ${table} ",
      "    USING btree (${column} ASC NULLS LAST) TABLESPACE pg_default;"
    ],
    "description": "MaxxiForge - Welder snippets sql create_search_index",
    "scope": ""
  },
  "MaxxiForge - Welder snippets sql create_table": {
    "prefix": "welder-sql-create_table",
    "body": [
      "CREATE TABLE ${table} (",
      "    id BIGSERIAL PRIMARY KEY,",
      "    ${field} CHARACTER VARYING(60) NOT NULL,",
      "    active BOOLEAN DEFAULT true NOT NULL,",
      "    created_at TIMESTAMPTZ NOT NULL,",
      "    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()",
      ");"
    ],
    "description": "MaxxiForge - Welder snippets sql create_table",
    "scope": ""
  },
  "MaxxiForge - Welder snippets sql create_unique_index": {
    "prefix": "welder-sql-create_unique_index",
    "body": [
      "CREATE UNIQUE INDEX idx_${table}_${column} ON ${table} ",
      "    USING btree (${column} ASC NULLS LAST) TABLESPACE pg_default;"
    ],
    "description": "MaxxiForge - Welder snippets sql create_unique_index",
    "scope": ""
  },
  "MaxxiForge - Welder snippets sql fk": {
    "prefix": "welder-sql-fk",
    "body": [
      "$table_id BIGINT REFERENCES $table(id) NOT NULL,"
    ],
    "description": "MaxxiForge - Welder snippets sql fk",
    "scope": ""
  },
  "MaxxiForge - Welder snippets sql fk_deferred": {
    "prefix": "welder-sql-fk_deferred",
    "body": [
      "$table_id BIGINT REFERENCES $table(id) DEFERRABLE INITIALLY DEFERRED,"
    ],
    "description": "MaxxiForge - Welder snippets sql fk_deferred",
    "scope": ""
  }
}